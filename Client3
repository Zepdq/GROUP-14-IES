# Client Code
import socket
import os
import threading

# Client configuratie
HEADER = 64
PORT = 5050
FORMAT = 'utf-8'
DISCONNECTED_MESSAGE = "DISCONNECT"
SERVER = "192.168.0.106"  # Pas aan naar het IP-adres van de server
ADDR = (SERVER, PORT)

# Client socket maken
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(ADDR)

# Zorg ervoor dat de directory voor ontvangen bestanden bestaat
os.makedirs('client_files', exist_ok=True)

def receive_messages():
    """Luister naar berichten van de server."""
    while True:
        try:
            message = client.recv(1024).decode(FORMAT)
            print(message)
        except Exception as e:
            print(f"Fout tijdens het ontvangen: {e}")
            break

def send_message():
    """Verstuur berichten naar de server."""
    try:
        while True:
            message = input("Typ een bericht: ")
            if message == DISCONNECTED_MESSAGE:
                send(DISCONNECTED_MESSAGE)
                print("Verbinding verbroken.")
                client.close()
                break
            else:
                send(message)
    except Exception as e:
        print(f"Fout tijdens het verzenden van berichten: {e}")
        client.close()

def send(msg):
    """Verzend een bericht naar de server."""
    try:
        message = msg.encode(FORMAT)
        msg_length = len(message)
        send_length = str(msg_length).encode(FORMAT)
        send_length += b' ' * (HEADER - len(send_length))
        client.send(send_length)
        client.send(message)
        print(f"Bericht verzonden: {msg}")  # Debugprint
    except Exception as e:
        print(f"Fout tijdens het verzenden van {msg}: {e}")

def download_file(file_name):
    """Vraag een bestand aan bij de server."""
    send(f"DOWNLOAD {file_name}")
    response = client.recv(1024).decode(FORMAT)
    if response == "FILE_FOUND":
        file_path = os.path.join('client_files', file_name)
        with open(file_path, 'wb') as f:
            data = client.recv(1024)
            f.write(data)
        print(f"File {file_name} downloaded and saved in client_files.")
    else:
        print("File not found on the server.")

def upload_file(file_name):
    """Upload een bestand naar de server."""
    file_path = os.path.join('client_files', file_name)
    if os.path.exists(file_path):
        send(f"UPLOAD {file_name}")
        with open(file_path, 'rb') as f:
            client.send(f.read())
        print(client.recv(1024).decode(FORMAT))  # Server's response
    else:
        print("File not found in client_files.")

# Main menu loop
if __name__ == "__main__":
    print("Client verbonden met de server.")

    # Start threads voor verzenden en ontvangen van berichten
    receive_thread = threading.Thread(target=receive_messages)
    receive_thread.start()

    while True:
        print("\nMenu:")
        print("1. List files on server")
        print("2. Download a file")
        print("3. Upload a file")
        print("4. Chat")
        print("5. Disconnect")
        choice = input("Enter your choice: ")

        if choice == '1':
            send("LIST")
            files = client.recv(1024).decode(FORMAT)
            print("Files on server:")
            print(files)
        elif choice == '2':
            file_name = input("Enter the name of the file to download: ")
            download_file(file_name)
        elif choice == '3':
            file_name = input("Enter the name of the file to upload: ")
            upload_file(file_name)
        elif choice == '4':
            print("Typ berichten om te chatten. Typ 'DISCONNECT' om te stoppen.")
            send_message()
        elif choice == '5':
            send(DISCONNECTED_MESSAGE)
            print("Disconnected from server.")
            client.close()
            break
        else:
            print("Invalid choice. Please try again.")
